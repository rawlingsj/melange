package convert

import (
	"fmt"
	"github.com/pkg/errors"
	"io"
	"net/http"
	"os"
	"text/template"
)

type Context struct {
	ApkBuild       *ApkBuild
	ConfigFilename string
	OutDir         string
	Client         *http.Client
}
type ApkBuild struct {
	PackageName   string `yaml:"pkgname"`
	PackageVerion string `yaml:"pkgver"`
	PackageRel    string `yaml:"pkgrel"`
	PackageDesc   string `yaml:"pkgdesc"`
	PackageUrl    string `yaml:"url"`
	Arch          string `yaml:"arch"`
	License       string `yaml:"license"`
	MakeDepends   string `yaml:"makedepends"`
	SubPackages   string `yaml:"subpackages"`
	Source        string `yaml:"source"`
}

var apkbuildTemplate = `# Generated by melange.
pkgname = {{.PackageName}}
pkgver = {{.Origin.Version}}-r{{.Origin.Epoch}}
arch = {{.Arch}}
pkgdesc = {{.Description}}
{{- range $copyright := .Origin.Copyright }}
license = {{ $copyright.License }}
{{- end }}
`

func New(configFilename string) (Context, error) {
	context := Context{}

	err := validate(configFilename)
	if err != nil {
		return context, errors.Wrapf(err, "failed to validate config filename")
	}
	context.ConfigFilename = configFilename

	context.Client = &http.Client{}

	return context, nil
}

func validate(configFile string) error {
	//todo validate file

	// Build fileName from fullPath
	//fileURL, err := url.Parse(fullURLFile)
	//if err != nil {
	//	log.Fatal(err)
	//}
	return nil
}

func (c Context) getApkBuildFile() error {

	fullURLFile := c.ConfigFilename

	// Put content on file
	resp, err := c.Client.Get(fullURLFile)
	if err != nil {
		return errors.Wrapf(err, "getting %s", fullURLFile)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return errors.Wrapf(err, "reading body")
	}

	if len(body) == 0 {
		return fmt.Errorf("body for %s is empty", fullURLFile)
	}

	err = c.generateApkBuildData()
	if err != nil {
		return errors.Wrapf(err, "failed to template apkbuild %s", string(body))
	}
	fmt.Printf("Got APKBUILD_DATA %s", c.ApkBuild.PackageName)
	return nil
}

func (c *Context) generateApkBuildData() error {
	tmpl := template.New("apkbuild")
	// todo change standard out
	return template.Must(tmpl.Parse(apkbuildTemplate)).Execute(os.Stdout, c.ApkBuild)
}

func (c Context) getSourceSha() {

}

func (c Context) mapMelange() {

}

func (c Context) write() {

}

func (c Context) name() {

}
